import {
  CareCenterElderlyNoteFile,
  CreatedEmployee,
  Elderly,
} from "service/care-information/types";
import { Expenses } from "service/registration-form/types";
import { Profile } from "service/workers/type";
import { Base, PaginationResponse } from "types";

export enum FilterFinanceLine {
  toForm30 = "toForm30",
  toSpend30 = "toSpend30",
  donationtoForm = "donationtoForm",
  donationToSpend = "donationToSpend",
  norExpense = "noExpense",
}

export interface FilterFinanceButton {
  value: FilterFinanceLine;
  label: string;
}

export const FinanceStatusToSpend30Array = Object.freeze([
  {
    label: "Баяр ёслол",
    value: 1,
  },
  {
    label: "Эмчилгээ",
    value: 2,
  },
  {
    label: "Засвар үйлчилгээ",
    value: 3,
  },
  {
    label: "Замын зардал",
    value: 4,
  },
  {
    label: "Эм тариа",
    value: 5,
  },
  {
    label: "Үзвэр",
    value: 6,
  },
  {
    label: "Бусад",
    value: 7,
  },
]);

export const FinanceDonationTypeArray = Object.freeze([
  {
    label: "Хандивийн хэлбэр: Мөнгөн",
    value: "money",
  },
  {
    label: "Хандивийн хэлбэр: Бусад",
    value: "other",
  },
]);

// Хандивийн хэлбэр
export enum FilterMoneyline {
  Money = 1,
  Other = 2,
}

export interface FilterMoneyButton {
  value: FilterMoneyline;
  label: string;
}

// Хандивласан хэлбэр
export enum FilterDonationLine {
  Cash = 1,
  Bank = 2,
}

export interface FilterDonationButton {
  value: FilterDonationLine;
  label: string;
}

export interface Spent30 extends Base {
  care_center_id: number;
  elderlies: Elderlyies[];
  expense_type: number;
  title: string;
  quantity: number;
  amount: number;
  date: string;
  description: string;
}

export interface Elderlyies {
  id: number;
  created_at: string;
  updated_at: string;
  elderly_id: number;
  care_center_id: number;
  social_worker_elderly_id: number;
  status: number;
  elderly: Elderly;
  three_way_contract: null;
  jewelry_registry: null;
  situational: null;
  is_see_internal_regulations: boolean;
  received_employees: null;
  received_document_items: string;
  received_date: string;
  delivered_person: DeliveredPerson;
  created_employee_id: number;
}

export interface DeliveredPerson {
  city_id: number;
  district_id: number;
  khoroo_id: number;
  first_name: string;
  position: string;
  phone_number: string;
}

// Generated by https://quicktype.io

export interface CashDonationType extends Base {
  care_center_id: number;
  donation_type: number;
  transaction_type: number;
  is_organization: boolean;
  first_name: string;
  email: string;
  phone_number: string;
  description: string;
  total_amount: number;
  is_approved: boolean;
  date: string;
  goods: Goods[];
}

export interface Goods {
  id: number;
  created_at: string;
  updated_at: string;
  donation_id: number;
  name: string;
  unit_amount: number;
  quantity: number;
  total_amount: number;
}

// Generated by https://quicktype.io

// Generated by https://quicktype.io

export interface NormativeBudgesTypeList {
  id: number;
  name: string;
  budget: number;
  remaining: number;
  normative_type: number;
  months: Month[];
}

export interface Month {
  name: string;
  status: number;
  amount: number;
}

// Generated by https://quicktype.io

export interface InfoType {
  year_budget: number;
  expense: number;
  id: number;
  update_at: Date;
}

export enum NormativeTypeEnum {
  drug = 1,
  food = 2,
  clothes = 3,
}

export const NormativeTypeArrayOptions = Object.freeze([
  {
    label: "Эм бэлдмэл эмнэлгийн хэрэгсэл",
    value: NormativeTypeEnum.drug,
  },
  {
    label: "Хоол, хүнс",
    value: NormativeTypeEnum.food,
  },
  {
    label: "Нормын хувцас, зөөлөн эдлэл",
    value: NormativeTypeEnum.clothes,
  },
]);

// Generated by https://quicktype.io

export interface GetNormativeType {
  id: number;
  created_at: string;
  updated_at: string;
  care_center_id: number;
  year: number;
  budget: number;
  description: string;
  remaining_amount: number;
  types: Type[];
  created_employee_id: number;
  created_employee: CreatedEmployee;
}

export interface Type {
  id: number;
  created_at: string;
  updated_at: string;
  normative_expense_budget_ud: number;
  normative_expense_budget: null;
  budget: number;
  remaining_amount: number;
  normative_type: number;
}

// Generated by https://quicktype.io

export interface NormativeDetailList extends Base {
  care_center_id: number;
  year: number;
  month: number;
  date: string;
  normative_type_id: number;
  normative_type: number;
  amount: number;
  description: string;
  order_files: CareCenterElderlyNoteFile[];
  meeting_note_files: CareCenterElderlyNoteFile[];
  contract_files: CareCenterElderlyNoteFile[];
  advice_files: CareCenterElderlyNoteFile[];
  tender_gov_mn?: string;
  created_employee_id: number;
  created_employee: CreatedEmployee;
}

export interface ExpensePaginzation extends PaginationResponse<Spent30> {
  expense: number;
  register: number;
  updated_at: Date;
}

export interface DonationPaginzation
  extends PaginationResponse<CashDonationType> {
  expense: number;
  register: number;
  updated_at: Date;
}

export interface DonationExpensePaginzation
  extends PaginationResponse<DonationExpenseInterface> {
  expense: number;
  register: number;
  updated_at: Date;
}

export interface DonationExpenseInterface extends Base {
  amount: number;
  care_center_id: number;
  date: Date;
  description: string;
}

export interface NormativeHistory {
  id: number;
  created_at: Date;
  updated_at: Date;
  normative_expense_budget_id: number;
  normative_expense_budget: null;
  budget: number;
  description: string;
  created_employee: CreatedEmployee;
}
